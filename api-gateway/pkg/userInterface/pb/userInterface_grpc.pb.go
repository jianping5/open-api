// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: pkg/userInterface/pb/userInterface.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserInterfaceService_AddUserInterfaceInfo_FullMethodName = "/userInterface.UserInterfaceService/AddUserInterfaceInfo"
	UserInterfaceService_GetUserByAccessKey_FullMethodName   = "/userInterface.UserInterfaceService/GetUserByAccessKey"
	UserInterfaceService_GetInterfaceInfo_FullMethodName     = "/userInterface.UserInterfaceService/GetInterfaceInfo"
)

// UserInterfaceServiceClient is the client API for UserInterfaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInterfaceServiceClient interface {
	AddUserInterfaceInfo(ctx context.Context, in *AddUserInterfaceInfoRequest, opts ...grpc.CallOption) (*AddUserInterfaceInfoResponse, error)
	GetUserByAccessKey(ctx context.Context, in *GetUserByAccessKeyRequest, opts ...grpc.CallOption) (*GetUserByAccessKeyResponse, error)
	GetInterfaceInfo(ctx context.Context, in *GetInterfaceInfoRequest, opts ...grpc.CallOption) (*GetInterfaceInfoResponse, error)
}

type userInterfaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInterfaceServiceClient(cc grpc.ClientConnInterface) UserInterfaceServiceClient {
	return &userInterfaceServiceClient{cc}
}

func (c *userInterfaceServiceClient) AddUserInterfaceInfo(ctx context.Context, in *AddUserInterfaceInfoRequest, opts ...grpc.CallOption) (*AddUserInterfaceInfoResponse, error) {
	out := new(AddUserInterfaceInfoResponse)
	err := c.cc.Invoke(ctx, UserInterfaceService_AddUserInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInterfaceServiceClient) GetUserByAccessKey(ctx context.Context, in *GetUserByAccessKeyRequest, opts ...grpc.CallOption) (*GetUserByAccessKeyResponse, error) {
	out := new(GetUserByAccessKeyResponse)
	err := c.cc.Invoke(ctx, UserInterfaceService_GetUserByAccessKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInterfaceServiceClient) GetInterfaceInfo(ctx context.Context, in *GetInterfaceInfoRequest, opts ...grpc.CallOption) (*GetInterfaceInfoResponse, error) {
	out := new(GetInterfaceInfoResponse)
	err := c.cc.Invoke(ctx, UserInterfaceService_GetInterfaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInterfaceServiceServer is the server API for UserInterfaceService service.
// All implementations must embed UnimplementedUserInterfaceServiceServer
// for forward compatibility
type UserInterfaceServiceServer interface {
	AddUserInterfaceInfo(context.Context, *AddUserInterfaceInfoRequest) (*AddUserInterfaceInfoResponse, error)
	GetUserByAccessKey(context.Context, *GetUserByAccessKeyRequest) (*GetUserByAccessKeyResponse, error)
	GetInterfaceInfo(context.Context, *GetInterfaceInfoRequest) (*GetInterfaceInfoResponse, error)
	mustEmbedUnimplementedUserInterfaceServiceServer()
}

// UnimplementedUserInterfaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserInterfaceServiceServer struct {
}

func (UnimplementedUserInterfaceServiceServer) AddUserInterfaceInfo(context.Context, *AddUserInterfaceInfoRequest) (*AddUserInterfaceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserInterfaceInfo not implemented")
}
func (UnimplementedUserInterfaceServiceServer) GetUserByAccessKey(context.Context, *GetUserByAccessKeyRequest) (*GetUserByAccessKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByAccessKey not implemented")
}
func (UnimplementedUserInterfaceServiceServer) GetInterfaceInfo(context.Context, *GetInterfaceInfoRequest) (*GetInterfaceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterfaceInfo not implemented")
}
func (UnimplementedUserInterfaceServiceServer) mustEmbedUnimplementedUserInterfaceServiceServer() {}

// UnsafeUserInterfaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInterfaceServiceServer will
// result in compilation errors.
type UnsafeUserInterfaceServiceServer interface {
	mustEmbedUnimplementedUserInterfaceServiceServer()
}

func RegisterUserInterfaceServiceServer(s grpc.ServiceRegistrar, srv UserInterfaceServiceServer) {
	s.RegisterService(&UserInterfaceService_ServiceDesc, srv)
}

func _UserInterfaceService_AddUserInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserInterfaceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInterfaceServiceServer).AddUserInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInterfaceService_AddUserInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInterfaceServiceServer).AddUserInterfaceInfo(ctx, req.(*AddUserInterfaceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInterfaceService_GetUserByAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInterfaceServiceServer).GetUserByAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInterfaceService_GetUserByAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInterfaceServiceServer).GetUserByAccessKey(ctx, req.(*GetUserByAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInterfaceService_GetInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInterfaceServiceServer).GetInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInterfaceService_GetInterfaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInterfaceServiceServer).GetInterfaceInfo(ctx, req.(*GetInterfaceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInterfaceService_ServiceDesc is the grpc.ServiceDesc for UserInterfaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInterfaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userInterface.UserInterfaceService",
	HandlerType: (*UserInterfaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserInterfaceInfo",
			Handler:    _UserInterfaceService_AddUserInterfaceInfo_Handler,
		},
		{
			MethodName: "GetUserByAccessKey",
			Handler:    _UserInterfaceService_GetUserByAccessKey_Handler,
		},
		{
			MethodName: "GetInterfaceInfo",
			Handler:    _UserInterfaceService_GetInterfaceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/userInterface/pb/userInterface.proto",
}
