// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: pkg/interfaces/pb/interfaces.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InterfacesService_GetName_FullMethodName = "/interfaces.interfacesService/GetName"
)

// InterfacesServiceClient is the client API for InterfacesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfacesServiceClient interface {
	GetName(ctx context.Context, in *GetNameRequest, opts ...grpc.CallOption) (*GetNameResponse, error)
}

type interfacesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfacesServiceClient(cc grpc.ClientConnInterface) InterfacesServiceClient {
	return &interfacesServiceClient{cc}
}

func (c *interfacesServiceClient) GetName(ctx context.Context, in *GetNameRequest, opts ...grpc.CallOption) (*GetNameResponse, error) {
	out := new(GetNameResponse)
	err := c.cc.Invoke(ctx, InterfacesService_GetName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfacesServiceServer is the server API for InterfacesService service.
// All implementations must embed UnimplementedInterfacesServiceServer
// for forward compatibility
type InterfacesServiceServer interface {
	GetName(context.Context, *GetNameRequest) (*GetNameResponse, error)
	mustEmbedUnimplementedInterfacesServiceServer()
}

// UnimplementedInterfacesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterfacesServiceServer struct {
}

func (UnimplementedInterfacesServiceServer) GetName(context.Context, *GetNameRequest) (*GetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedInterfacesServiceServer) mustEmbedUnimplementedInterfacesServiceServer() {}

// UnsafeInterfacesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfacesServiceServer will
// result in compilation errors.
type UnsafeInterfacesServiceServer interface {
	mustEmbedUnimplementedInterfacesServiceServer()
}

func RegisterInterfacesServiceServer(s grpc.ServiceRegistrar, srv InterfacesServiceServer) {
	s.RegisterService(&InterfacesService_ServiceDesc, srv)
}

func _InterfacesService_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfacesServiceServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterfacesService_GetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfacesServiceServer).GetName(ctx, req.(*GetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterfacesService_ServiceDesc is the grpc.ServiceDesc for InterfacesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterfacesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interfaces.interfacesService",
	HandlerType: (*InterfacesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _InterfacesService_GetName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/interfaces/pb/interfaces.proto",
}
